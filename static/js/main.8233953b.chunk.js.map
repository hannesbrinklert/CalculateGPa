{"version":3,"sources":["components/Grade.js","components/GradeList.js","components/GradeForm.js","components/GradeCalc.js","App.js","serviceWorker.js","index.js"],"names":["Grade","className","key","this","props","course","points","grade","Button","variant","onClick","rem","id","React","Component","GradeList","Container","Row","Col","md","Table","striped","hover","grades","map","x","GradeForm","state","handleGrade","event","length","alert","parseInt","setState","onSubmit","InputGroup","Form","Control","type","value","onChange","target","placeholder","as","name","Append","GradeCalc","parseFloat","reduce","a","b","toFixed","list","totalSum","i","sum","avg","App","remove","bind","addGrade","updateGrade","g","prevState","newGrade","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SA8BeA,G,6KAxBD,IAAD,OACL,OACI,wBAAIC,UAAU,UACV,4BACI,uBAAGA,UAAU,SAASC,IAAI,UAAUC,KAAKC,MAAMC,SAGnD,4BACI,uBAAGJ,UAAU,SAASC,IAAI,UAAUC,KAAKC,MAAME,SAGnD,4BACI,uBAAGL,UAAU,QAAQC,IAAI,SAASC,KAAKC,MAAMG,QAEjD,4BACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASR,UAAU,YAAYS,QAAS,WAAQ,EAAKN,MAAMO,IAAI,EAAKP,MAAMQ,MAA1F,gB,GAhBAC,IAAMC,Y,+BCkDXC,E,uKA9CD,IAAD,OACL,OACI,kBAAEC,EAAA,EAAF,KAEI,kBAACC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IAET,kBAACD,EAAA,EAAD,CAAKC,GAAI,GACL,yBAAKlB,UAAU,cACX,kBAACmB,EAAA,EAAD,CAAOC,SAAO,EAACC,OAAK,GAChB,+BACI,4BACI,sCAGA,kCAGA,qCAIA,+BAKR,+BACKnB,KAAKC,MAAMmB,OAAOC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAOvB,IAAKuB,EAAEb,GAAIL,MAAOkB,EAAElB,MAAOF,OAAQoB,EAAEpB,OAAQC,OAAQmB,EAAEnB,OAAQM,GAAIa,EAAEb,GAAID,IAAK,EAAKP,MAAMO,aAQ5I,kBAACO,EAAA,EAAD,CAAKC,GAAI,U,GAvCLN,IAAMC,W,gBC+DfY,E,4MA3DXC,MAAQ,CAEJtB,OAAQ,GACRC,OAAQ,GACRC,MAAO,IACPK,GAAI,G,EAGRgB,YAAc,SAACC,GAGsB,IAA7B,EAAKF,MAAMtB,OAAOyB,OAClBC,MAAM,8BAEDC,SAAS,EAAKL,MAAMrB,SAAW,EACpCyB,MAAM,4BAEN,EAAKE,SAAS,CAAErB,GAAI,EAAKe,MAAMf,GAAK,IACpC,EAAKR,MAAM8B,SAAS,EAAKP,OAEzB,EAAKM,SAAS,CACV5B,OAAQ,GACRC,OAAQ,GACRC,MAAO,Q,uDAMT,IAAD,OACL,OAEI,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACT,kBAACD,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOC,MAAOpC,KAAKwB,MAAMtB,OAAQmC,SAAU,SAACX,GAAD,OAAW,EAAKI,SAAS,CAAE5B,OAAQwB,EAAMY,OAAOF,SAAUG,YAAY,WACpI,kBAACN,EAAA,EAAKC,QAAN,CAAcC,KAAK,SAASC,MAAOpC,KAAKwB,MAAMrB,OAAQkC,SAAU,SAACX,GAAD,OAAW,EAAKI,SAAS,CAAE3B,OAAQuB,EAAMY,OAAOF,SAAUG,YAAY,OACtI,kBAACN,EAAA,EAAKC,QAAN,CAAcM,GAAG,SAASC,KAAK,cAAcJ,SAAU,SAACX,GAAD,OAAW,EAAKI,SAAS,CAAE1B,MAAOsB,EAAMY,OAAOF,SAAUA,MAAOpC,KAAKwB,MAAMpB,OAC9H,4BAAQgC,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,MAEJ,kBAACJ,EAAA,EAAWU,OAAZ,KACI,kBAACrC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASP,KAAKyB,aAAxC,gBAKZ,kBAACV,EAAA,EAAD,CAAKC,GAAI,U,GArDLN,IAAMC,WCqCfgC,E,oKArCP,OAAQ3C,KAAKC,MAAMmB,OAAOC,KAAI,SAAAC,GAAC,OAAIsB,WAAWtB,EAAEnB,WAAS0C,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAIC,QAAQ,K,4BAM7F,IAFA,IAAIC,EAAOjD,KAAKC,MAAMmB,OAClB8B,EAAW,EACNC,EAAI,EAAGA,EAAIF,EAAKtB,OAAQwB,IACP,MAAlBF,EAAKE,GAAG/C,QACR8C,GAAaN,WAAWK,EAAKE,GAAGhD,OAASyC,WAAWK,EAAKE,GAAG/C,SAGpE,OAAiB,IAAb8C,EACO,GAECA,EAAWlD,KAAKoD,OAAOJ,QAAQ,K,+BAM3C,OACI,kBAACnC,EAAA,EAAD,CAAWf,UAAU,eACjB,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACT,kBAACD,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAG,uCAAgBhB,KAAKoD,QAE5B,kBAACrC,EAAA,EAAD,CAAKC,GAAI,GACL,2BAAG,oCAAahB,KAAKqD,QAEzB,kBAACtC,EAAA,EAAD,CAAKC,GAAI,U,GAlCLN,IAAMC,WCiDf2C,E,kDA7Cb,aAAe,IAAD,uBACZ,gBACKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAJP,OAOZ,EAAKhC,MAAQ,CACXJ,OAHO,IALG,E,wDAcFuC,GACV3D,KAAK8B,UAAS,SAAC8B,EAAW3D,GACxB,MAAO,CAAEmB,OAAQuC,Q,+BAIZE,GACP,IAAIZ,EAAOjD,KAAKwB,MAAMJ,OACtBpB,KAAK0D,YAAL,sBAAqBT,GAArB,CAA2BY,O,6BAGtBpD,GACL,IAAIwC,EAAOjD,KAAKwB,MAAMJ,OAAO0C,QAAO,SAAAxC,GAAC,OAAIA,EAAEb,KAAOA,KAClDT,KAAK0D,YAAYT,K,+BAIjB,OACE,6BACE,6CAEA,kBAAC,EAAD,CAAW7B,OAAQpB,KAAKwB,MAAMJ,SAC9B,kBAAC,EAAD,CAAWW,SAAU/B,KAAKyD,WAC1B,kBAAC,EAAD,CAAWrC,OAAQpB,KAAKwB,MAAMJ,OAAQZ,IAAKR,KAAKuD,c,GAvCtC7C,IAAMC,WCKJoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8233953b.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nclass Grade extends React.Component {\r\n    render() {\r\n        return (\r\n            <tr className=\"oneRow\">\r\n                <td>\r\n                    <p className=\"course\" key=\"course\">{this.props.course}</p>\r\n                </td>\r\n\r\n                <td>\r\n                    <p className=\"points\" key=\"points\">{this.props.points}</p>\r\n                </td>\r\n\r\n                <td>\r\n                    <p className=\"grade\" key=\"grade\">{this.props.grade}</p>\r\n                </td>\r\n                <td>\r\n                    <Button variant=\"danger\" className=\"btnRemove\" onClick={() => { this.props.rem(this.props.id) }}>Remove</Button>\r\n                </td>\r\n\r\n            </tr>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Grade;","import React from 'react';\r\nimport Grade from \"./Grade\";\r\nimport Table from 'react-bootstrap/Table';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nclass GradeList extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            < Container >\r\n\r\n                <Row>\r\n\r\n                    <Col md={2}></Col>\r\n\r\n                    <Col md={8}>\r\n                        <div className=\"gradeTable\">\r\n                            <Table striped hover>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>\r\n                                            Course\r\n                                     </th>\r\n                                        <th>\r\n                                            HP\r\n                                         </th>\r\n                                        <th>\r\n                                            Grade\r\n                                         </th>\r\n\r\n                                        <th>\r\n\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {this.props.grades.map(x => <Grade key={x.id} grade={x.grade} course={x.course} points={x.points} id={x.id} rem={this.props.rem} />)}\r\n                                </tbody>\r\n                            </Table>\r\n\r\n                        </div>\r\n\r\n                    </Col>\r\n\r\n                    <Col md={2}></Col>\r\n\r\n                </Row>\r\n\r\n            </Container >\r\n        );\r\n    }\r\n}\r\n\r\nexport default GradeList; ","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nclass GradeForm extends React.Component {\r\n\r\n    state = {\r\n\r\n        course: \"\",\r\n        points: \"\",\r\n        grade: \"U\",\r\n        id: 0,\r\n    };\r\n\r\n    handleGrade = (event) => {\r\n        //event.preventDefault();\r\n\r\n        if (this.state.course.length === 0) {\r\n            alert(\"Please write a course name\")\r\n        }\r\n        else if (parseInt(this.state.points) <= 0) {\r\n            alert(\"HP must be lager than 0\")\r\n        } else {\r\n            this.setState({ id: this.state.id + 1 })\r\n            this.props.onSubmit(this.state);\r\n\r\n            this.setState({\r\n                course: \"\",\r\n                points: \"\",\r\n                grade: \"U\",\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <Container>\r\n                <Row>\r\n                    <Col md={2}></Col>\r\n                    <Col md={8}>\r\n                        <InputGroup>\r\n                            <Form.Control type=\"text\" value={this.state.course} onChange={(event) => this.setState({ course: event.target.value })} placeholder=\"Course\" />\r\n                            <Form.Control type=\"number\" value={this.state.points} onChange={(event) => this.setState({ points: event.target.value })} placeholder=\"HP\" />\r\n                            <Form.Control as=\"select\" name=\"selectGrade\" onChange={(event) => this.setState({ grade: event.target.value })} value={this.state.grade}>\r\n                                <option value=\"U\">U</option>\r\n                                <option value=\"3\">3</option>\r\n                                <option value=\"4\">4</option>\r\n                                <option value=\"5\">5</option>\r\n                            </Form.Control>\r\n                            <InputGroup.Append>\r\n                                <Button variant=\"success\" onClick={this.handleGrade}>Add Grade</Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </Col>\r\n\r\n                    <Col md={2}></Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GradeForm;","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nclass GradeCalc extends React.Component {\r\n\r\n\r\n    sum() {\r\n        return (this.props.grades.map(x => parseFloat(x.points)).reduce((a, b) => a + b, 0)).toFixed(2)\r\n    }\r\n\r\n    avg() {\r\n        let list = this.props.grades\r\n        let totalSum = 0\r\n        for (let i = 0; i < list.length; i++) {\r\n            if (list[i].grade !== \"U\") {\r\n                totalSum += (parseFloat(list[i].points * parseFloat(list[i].grade)))\r\n            }\r\n        }\r\n        if (totalSum === 0) {\r\n            return 0\r\n        } else {\r\n            return (totalSum / this.sum()).toFixed(2)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"calculation\">\r\n                <Row>\r\n                    <Col md={2}></Col>\r\n                    <Col md={4}>\r\n                        <p><b>Sum HP: </b>{this.sum()}</p>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <p><b>GPa: </b>{this.avg()}</p>\r\n                    </Col>\r\n                    <Col md={2}></Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GradeCalc","import React from 'react';\nimport './App.css';\nimport GradeList from \"./components/GradeList\";\nimport GradeForm from \"./components/GradeForm\";\nimport GradeCalc from \"./components/GradeCalc\";\n\n//readme fil\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.remove = this.remove.bind(this);\n    this.addGrade = this.addGrade.bind(this);\n    this.updateGrade = this.updateGrade.bind(this);\n    let gr = []\n\n    this.state = {\n      grades: gr,\n\n    }\n\n  }\n\n  updateGrade(g) {\n    this.setState((prevState, props) => {\n      return { grades: g }\n    });\n  }\n\n  addGrade(newGrade) {\n    let list = this.state.grades\n    this.updateGrade([...list, newGrade])\n  }\n\n  remove(id) {\n    let list = this.state.grades.filter(x => x.id !== id)\n    this.updateGrade(list)\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Calculate GPa</h1>\n\n        <GradeCalc grades={this.state.grades} />\n        <GradeForm onSubmit={this.addGrade} />\n        <GradeList grades={this.state.grades} rem={this.remove} />\n\n      </div >\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}